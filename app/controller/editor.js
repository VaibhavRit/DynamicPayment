var fs = require('fs');

var Mustache = require("mustache");
var nodelist = [ { id: 'node-red/sentiment',
    name: 'sentiment',
    types: [ 'sentiment' ],
    enabled: true,
    module: 'node-red',
    version: '0.14.3-git' },
  { id: 'node-red/inject',
    name: 'inject',
    types: [ 'inject' ],
    enabled: true,
    module: 'node-red',
    version: '0.14.3-git' },
  { id: 'node-red/catch',
    name: 'catch',
    types: [ 'catch' ],
    enabled: true,
    module: 'node-red',
    version: '0.14.3-git' },
  { id: 'node-red/status',
    name: 'status',
    types: [ 'status' ],
    enabled: true,
    module: 'node-red',
    version: '0.14.3-git' },
  { id: 'node-red/debug',
    name: 'debug',
    types: [ 'debug' ],
    enabled: true,
    module: 'node-red',
    version: '0.14.3-git' },
  { id: 'node-red/link',
    name: 'link',
    types: [ 'link in', 'link out' ],
    enabled: true,
    module: 'node-red',
    version: '0.14.3-git' },
  { id: 'node-red/exec',
    name: 'exec',
    types: [ 'exec' ],
    enabled: true,
    module: 'node-red',
    version: '0.14.3-git' },
  { id: 'node-red/function',
    name: 'function',
    types: [ 'function' ],
    enabled: true,
    module: 'node-red',
    version: '0.14.3-git' },
  { id: 'node-red/template',
    name: 'template',
    types: [ 'template' ],
    enabled: true,
    module: 'node-red',
    version: '0.14.3-git' },
  { id: 'node-red/delay',
    name: 'delay',
    types: [ 'delay' ],
    enabled: true,
    module: 'node-red',
    version: '0.14.3-git' },
  { id: 'node-red/trigger',
    name: 'trigger',
    types: [ 'trigger' ],
    enabled: true,
    module: 'node-red',
    version: '0.14.3-git' },
  { id: 'node-red/comment',
    name: 'comment',
    types: [ 'comment' ],
    enabled: true,
    module: 'node-red',
    version: '0.14.3-git' },
  { id: 'node-red/unknown',
    name: 'unknown',
    types: [ 'unknown' ],
    enabled: true,
    module: 'node-red',
    version: '0.14.3-git' },
  { id: 'node-red/rpi-gpio',
    name: 'rpi-gpio',
    types: [ 'rpi-gpio in', 'rpi-gpio out', 'rpi-mouse', 'rpi-keyboard' ],
    enabled: true,
    module: 'node-red',
    err: 'Info : Ignoring Raspberry Pi specific node',
    version: '0.14.3-git' },
  { id: 'node-red/tls',
    name: 'tls',
    types: [ 'tls-config' ],
    enabled: true,
    module: 'node-red',
    version: '0.14.3-git' },
  { id: 'node-red/mqtt',
    name: 'mqtt',
    types: [ 'mqtt in', 'mqtt out', 'mqtt-broker' ],
    enabled: true,
    module: 'node-red',
    version: '0.14.3-git' },
  { id: 'node-red/httpin',
    name: 'httpin',
    types: [ 'http in', 'http response' ],
    enabled: true,
    module: 'node-red',
    version: '0.14.3-git' },
  { id: 'node-red/httprequest',
    name: 'httprequest',
    types: [ 'http request' ],
    enabled: true,
    module: 'node-red',
    version: '0.14.3-git' },
  { id: 'node-red/websocket',
    name: 'websocket',
    types: 
     [ 'websocket in',
       'websocket out',
       'websocket-listener',
       'websocket-client' ],
    enabled: true,
    module: 'node-red',
    version: '0.14.3-git' },
  { id: 'node-red/watch',
    name: 'watch',
    types: [ 'watch' ],
    enabled: true,
    module: 'node-red',
    version: '0.14.3-git' },
  { id: 'node-red/tcpin',
    name: 'tcpin',
    types: [ 'tcp in', 'tcp out', 'tcp request' ],
    enabled: true,
    module: 'node-red',
    version: '0.14.3-git' },
  { id: 'node-red/udp',
    name: 'udp',
    types: [ 'udp in', 'udp out' ],
    enabled: true,
    module: 'node-red',
    version: '0.14.3-git' },
  { id: 'node-red/switch',
    name: 'switch',
    types: [ 'switch' ],
    enabled: true,
    module: 'node-red',
    version: '0.14.3-git' },
  { id: 'node-red/change',
    name: 'change',
    types: [ 'change' ],
    enabled: true,
    module: 'node-red',
    version: '0.14.3-git' },
  { id: 'node-red/range',
    name: 'range',
    types: [ 'range' ],
    enabled: true,
    module: 'node-red',
    version: '0.14.3-git' },
  { id: 'node-red/split',
    name: 'split',
    types: [ 'split', 'join' ],
    enabled: true,
    module: 'node-red',
    version: '0.14.3-git' },
  { id: 'node-red/CSV',
    name: 'CSV',
    types: [ 'csv' ],
    enabled: true,
    module: 'node-red',
    version: '0.14.3-git' },
  { id: 'node-red/HTML',
    name: 'HTML',
    types: [ 'html' ],
    enabled: true,
    module: 'node-red',
    version: '0.14.3-git' },
  { id: 'node-red/JSON',
    name: 'JSON',
    types: [ 'json' ],
    enabled: true,
    module: 'node-red',
    version: '0.14.3-git' },
  { id: 'node-red/XML',
    name: 'XML',
    types: [ 'xml' ],
    enabled: true,
    module: 'node-red',
    version: '0.14.3-git' },
  { id: 'node-red/tail',
    name: 'tail',
    types: [ 'tail' ],
    enabled: true,
    module: 'node-red',
    version: '0.14.3-git' },
  { id: 'node-red/file',
    name: 'file',
    types: [ 'file', 'file in' ],
    enabled: true,
    module: 'node-red',
    version: '0.14.3-git' },
  { id: 'node-red-node-email/email',
    name: 'email',
    types: [ 'e-mail', 'e-mail in' ],
    enabled: true,
    module: 'node-red-node-email',
    version: '0.1.10' },
  { id: 'node-red-node-feedparser/feedparse',
    name: 'feedparse',
    types: [ 'feedparse' ],
    enabled: true,
    module: 'node-red-node-feedparser',
    version: '0.1.5' },
  { id: 'node-red-node-rbe/rbe',
    name: 'rbe',
    types: [ 'rbe' ],
    enabled: true,
    module: 'node-red-node-rbe',
    version: '0.1.5' },
  { id: 'node-red-node-serialport/serialport',
    name: 'serialport',
    types: [ 'serial in', 'serial out', 'serial-port' ],
    enabled: true,
    module: 'node-red-node-serialport',
    version: '0.2.1' },
  { id: 'node-red-node-twitter/twitter',
    name: 'twitter',
    types: [ 'twitter-credentials', 'twitter in', 'twitter out' ],
    enabled: true,
    module: 'node-red-node-twitter',
    version: '0.1.6' } ];



exports.nodes = function(req, res){
	if(req.get("accept") == "application/json"){
	 	res.send(nodelist);
	} else {
		fs.readFile('public/stripe/mainh.txt', function(err, data){
			if(err) console.log("No error");
			else res.send(data);
		});
	}
};


exports.startNode = function(req, res){
    console.log(__dirname);
    var file = fs.readFileSync(__dirname + "/../views/node.mst","utf8");
    res.send(Mustache.render(file, { page: 
                           { title: 'Node-RED',
                             favicon: 'favicon.ico',
                             tabicon: 'red/images/node-red-icon-black.svg' 
                           },
                            header: { title: 'Node-RED', image: 'red/images/node-red.png' },
                            asset: { red: 'red/red.js' },
                            version: '0.14.3-git' }));
    /*res.render('node', { page: 
                           { title: 'Node-RED',
                             favicon: 'favicon.ico',
                             tabicon: 'red/images/node-red-icon-black.svg' 
                           },
                            header: { title: 'Node-RED', image: 'red/images/node-red.png' },
                            asset: { red: 'red/red.min.js' },
                            version: '0.14.3-git' }
                            );*/
};

exports.settings = function(req, res){
    res.json({ httpNodeRoot: '/', version: '0.14.3-git', user: undefined });
}


exports.edit = function(req, res){
    res.json({
        name: 'Name',
        ok: 'Ok',
        done: 'Done',
        cancel: 'Cancel',
        delete: 'Delete',
        close: 'Close',
        load: 'Load',
        save: 'Save',
        import: 'Import',
        export: 'Export',
        defaultName: 'Flow __number__',
        editFlow: 'Edit flow: __name__',
        confirmDelete: 'Confirm delete',
        delete: 'Are you sure you want to delete "__label__"?',
        dropFlowHere: 'Drop the flow here',
        view: 'View',
        showGrid: 'Show grid',
        snapGrid: 'Snap to grid',
        show: 'Show sidebar',
        displayStatus: 'Show node status',
        displayConfig: 'Configuration nodes',
        import: 'Import',
        export: 'Export',
        clipboard: 'Clipboard',
        library: 'Library',
        examples: 'Examples',
        subflows: 'Subflows',
        createSubflow: 'Create Subflow',
        selectionToSubflow: 'Selection to Subflow',
        flows: 'Flows',
        add: 'Add',
        rename: 'Rename',
        delete: 'Delete',
        keyboardShortcuts: 'Keyboard Shortcuts',
        login: 'Login',
        logout: 'Logout',
        loggedInAs: 'Logged in as __name__',
        login: 'Login',
        loginFailed: 'Login failed',
        notAuthorized: 'Not authorized',
        warning: '<strong>Warning</strong>: __message__',
        undeployedChanges: 'node has undeployed changes',
        nodeActionDisabled: 'node actions disabled within subflow',
        error: '<strong>Error</strong>: __message__',
        lostConnection: 'Lost connection to server, reconnecting...',
        lostConnectionReconnect: 'Lost connection to server, reconnecting in __time__s.',
        lostConnectionTry: 'Try now',
        cannotAddSubflowToItself: 'Cannot add subflow to itself',
        cannotAddCircularReference: 'Cannot add subflow - circular reference detected',
        nodes: 'Nodes:',
        selectNodes: 'Select the text above and copy to the clipboard.',
        pasteNodes: 'Paste nodes here',
        importNodes: 'Import nodes',
        exportNodes: 'Export nodes to clipboard',
        importUnrecognised: 'Imported unrecognised type:',
        importUnrecognised_plural: 'Imported unrecognised types:',
        nodeCopied: '__count__ node copied',
        nodeCopied_plural: '__count__ nodes copied',
        invalidFlow: 'Invalid flow: __message__',
        deploy: 'Deploy',
        full: 'Full',
        fullDesc: 'Deploys everything in the workspace',
        modifiedFlows: 'Modified Flows',
        modifiedFlowsDesc: 'Only deploys flows that contain changed nodes',
        modifiedNodes: 'Modified Nodes',
        modifiedNodesDesc: 'Only deploys nodes that have changed',
        successfulDeploy: 'Successfully deployed',
        deployFailed: 'Deploy failed: __message__',
        unusedConfigNodes: 'You have some unused configuration nodes.',
        unusedConfigNodesLink: 'Click here to see them',
        noResponse: 'no response from server',
        confirm: 'Confirm deploy',
        cancel: 'Cancel',
        undeployedChanges: 'You have undeployed changes.Leaving this page will lose these changes.',
        improperlyConfigured: 'The workspace contains some nodes that are not properly configured:',
        unknown: 'The workspace contains some unknown node types:',
        confirm: 'Are you sure you want to deploy?',
        editSubflow: 'Edit flow template: __name__',
        edit: 'Edit flow template',
        subflowInstances: 'There is __count__ instance of this subflow template',
        subflowInstances_plural: 'There are __count__ instances of this subflow template',
        editSubflowProperties: 'edit properties',
        input: 'inputs:',
        output: 'outputs:',
        deleteSubflow: 'delete subflow',
        info: 'Description',
        format: 'markdown format',
        noNodesSelected: '<strong>Cannot create subflow</strong>: no nodes selected',
        multipleInputsToSelection: '<strong>Cannot create subflow</strong>: multiple inputs to selection',
        configEdit: 'Edit',
        configAdd: 'Add',
        configUpdate: 'Update',
        configDelete: 'Delete',
        nodesUse: '__count__ node uses this config',
        nodesUse_plural: '__count__ nodes use this config',
        addNewConfig: 'Add new __type__ config node',
        editNode: 'Edit __type__ node',
        editConfig: 'Edit __type__ config node',
        addNewType: 'Add new __type__...',
        scopeChange: 'Changing the scope will make it unavailable to nodes in other flows that use it',
        selectAll: 'Select all nodes',
        selectAllConnected: 'Select all connected nodes',
        addRemoveNode: 'Add/remove node from selection',
        deleteSelected: 'Delete selected nodes or link',
        importNode: 'Import nodes',
        exportNode: 'Export selected nodes',
        toggleSidebar: 'Toggle sidebar',
        deleteNode: 'Delete selected nodes or link',
        copyNode: 'Copy selected nodes',
        cutNode: 'Cut selected nodes',
        pasteNode: 'Paste nodes',
        openLibrary: 'Open Library...',
        saveToLibrary: 'Save to Library',
        typeLibrary: '__type__ library',
        unnamedType: 'Unnamed __type__',
        exportToLibrary: 'Export nodes to library',
        dialogSaveOverwrite: 'A __libraryType__ called __libraryName__ already exists. Overwrite?',
        invalidFilename: 'Invalid filename',
        savedNodes: 'Saved nodes',
        savedType: 'Saved __type__',
        saveFailed: 'Save failed: __message__',
        filename: 'Filename',
        folder: 'Folder',
        filenamePlaceholder: 'file',
        fullFilenamePlaceholder: 'a/b/file',
        folderPlaceholder: 'a/b',
        breadcrumb: 'Library',
        noInfo: 'no information available',
        filter: 'filter nodes',
        subflows: 'subflows',
        input: 'input',
        output: 'output',
        function: 'function',
        social: 'social',
        storage: 'storage',
        analysis: 'analysis',
        advanced: 'advanced',
        nodeAdded: 'Node added to palette:',
        nodeAdded_plural: 'Nodes added to palette',
        nodeRemoved: 'Node removed from palette:',
        nodeRemoved_plural: 'Nodes removed from palette:',
        nodeEnabled: 'Node enabled:',
        nodeEnabled_plural: 'Nodes enabled:',
        nodeDisabled: 'Node disabled:',
        nodeDisabled_plural: 'Nodes disabled:',
        name: 'Node information',
        label: 'info',
        node: 'Node',
        type: 'Type',
        id: 'ID',
        subflow: 'Subflow',
        instances: 'Instances',
        properties: 'Properties',
        blank: 'blank',
        arrayItems: '__count__ items',
        name: 'Configuration nodes',
        label: 'config',
        global: 'Global',
        none: 'none',
        subflows: 'subflows',
        flows: 'flows',
        filterUnused: 'unused',
        filterAll: 'all',
        filtered: '__count__ hidden',
        str: 'string',
        num: 'number',
        re: 'regular expression',
        bool: 'boolean',
        json: 'JSON',
        date: 'timestamp',
        add: 'add'
    });
};

exports.nodered = function(req, res){
    res.json({
        payload: 'Payload',
        topic: 'Topic',
        name: 'Name',
        username: 'Username',
        password: 'Password',
        connected: 'connected',
        'not-connected': 'not connected',
        disconnected: 'disconnected',
        connecting: 'connecting',
        error: 'error',
        ok: 'OK',
        error: '<strong>Error</strong>: __message__',
        'not-deployed': 'node not deployed',
        'no-response': 'no response from server',
        unexpected: 'unexpected error (__status__) __message__',
        nooverride: 'Warning: msg properties can no longer override set node properties. See bit.ly/nr-override-msg-props',
        inject: 'inject',
        repeat: 'repeat = __repeat__',
        crontab: 'crontab = __crontab__',
        stopped: 'stopped',
        failed: 'Inject failed: __error__',
        repeat: 'Repeat',
        timestamp: 'timestamp',
        none: 'none',
        interval: 'interval',
        'interval-time': 'interval between times',
        time: 'at a specific time',
        seconds: 'seconds',
        minutes: 'minutes',
        hours: 'hours',
        between: 'between',
        previous: 'previous value',
        at: 'at',
        and: 'and',
        every: 'every',
        0: 'Monday',
        1: 'Tuesday',
        2: 'Wednesday',
        3: 'Thursday',
        4: 'Friday',
        5: 'Saturday',
        6: 'Sunday',
        on: 'on',
        onstart: 'Inject once at start?',
        tip: '<b>Note:</b> "interval between times" and "at a specific time" will use cron.<br/>See info box for details.',
        success: 'Successfully injected: __label__',
        failed: 'inject failed, see log for details',
        catch: 'catch all',
        catchNodes: 'catch (__number__)',
        source: 'Catch errors from',
        node: 'node',
        type: 'type',
        selectAll: 'select all',
        sortByLabel: 'sort by label',
        sortByType: 'sort by type',
        all: 'all nodes',
        selected: 'selected nodes',
        status: 'status (all)',
        statusNodes: 'status (__number__)',
        source: 'Report status from',
        node: 'node',
        type: 'type',
        selectAll: 'select all',
        sortByLabel: 'sort by label',
        sortByType: 'sort by type',
        all: 'all nodes',
        selected: 'selected nodes',
        output: 'Output',
        msgprop: 'message property',
        msgobj: 'complete msg object',
        to: 'to',
        debtab: 'debug tab',
        tabcon: 'debug tab and console',
        activated: 'Successfully activated: __label__',
        deactivated: 'Successfully deactivated: __label__',
        label: 'debug',
        name: 'Debug messages',
        filterAll: 'all flows',
        filterCurrent: 'current flow',
        linkIn: 'link in',
        linkOut: 'link out',
        event: 'Event name',
        tls: 'TLS configuration',
        cert: 'Certificate',
        key: 'Private Key',
        ca: 'CA Certificate',
        'verify-server-cert': 'Verify server certificate',
        cert: 'path to certificate (PEM format)',
        key: 'path to private key (PEM format)',
        ca: 'path to CA certificate (PEM format)',
        'missing-file': 'No certificate/key file provided',
        command: 'Command',
        append: 'Append',
        timeout: 'Timeout',
        timeoutplace: 'optional',
        extraparams: 'extra input parameters',
        spawn: 'Use spawn() instead of exec()?',
        tip: 'Tip: <i>spawn</i> expects only one command word - and appended args to be comma separated.',
        function: 'Function',
        outputs: 'Outputs',
        inputListener: 'Cannot add listener to "input" event within Function',
        tip: 'See the Info tab for help writing functions.',
        template: 'Template',
        property: 'Set property',
        format: 'Syntax Highlight',
        syntax: 'Format',
        mustache: 'Mustache template',
        plain: 'Plain text',
        templatevalue: 'This is the payload: {{payload}} !',
        action: 'Action',
        for: 'For',
        delaymsg: 'Delay message',
        randomdelay: 'Random delay',
        limitrate: 'Limit rate to',
        fairqueue: 'Topic based fair queue',
        timedqueue: 'Timed release queue',
        milisecs: 'Miliseconds',
        secs: 'Seconds',
        sec: 'Second',
        mins: 'Minutes',
        min: 'Minute',
        hours: 'Hours',
        hour: 'Hour',
        days: 'Days',
        day: 'Day',
        between: 'Between',
        rate: 'Rate',
        msgper: 'msg(s) per',
        dropmsg: 'drop intermediate messages',
        delay: 'delay',
        limit: 'limit',
        random: 'random',
        queue: 'queue',
        timed: 'releases per',
        buffer: 'buffer exceeded 1000 messages',
        buffer1: 'buffer exceeded 10000 messages',
        send: 'Send',
        then: 'then',
        'then-send': 'then send',
        string: 'the string',
        number: 'the number',
        existing: 'the existing msg.payload',
        original: 'the original msg.payload',
        latest: 'the latest msg.payload',
        nothing: 'nothing',
        'wait-reset': 'wait to be reset',
        'wait-for': 'wait for',
        ms: 'Milliseconds',
        s: 'Seconds',
        m: 'Minutes',
        h: 'Hours',
        extend: ' extend delay if new message arrives',
        tip: 'The node can also be reset by sending a message with the <code>msg.reset</code> property set to any value.',
        trigger: 'trigger',
        'trigger-block': 'trigger & block',
        reset: 'and reset if msg.payload == ',
        resetprompt: '(optional reset value)',
        title: 'Title',
        body: 'Body',
        tip: 'Tip: The text can be styled as <a href="https://help.github.com/articles/markdown-basics/" target="_new">Github flavoured Markdown</a>',
        unknown: 'unknown',
        tip: '<p>This node is a type unknown to your installation of Node-RED.</p><p><i>If you deploy with the node in this state, it"s configuration will be preserved, but the flow will not start until the missing type is installed.</i></p><p>See the Info side bar for more help</p>',
        broker: 'Server',
        qos: 'QoS',
        clientid: 'Client ID',
        port: 'Port',
        keepalive: 'Keep alive time (s)',
        cleansession: 'Use clean session',
        'use-tls': 'Enable secure (SSL/TLS) connection',
        'tls-config': 'TLS Configuration',
        'verify-server-cert': 'Verify server certificate',
        compatmode: 'Use legacy MQTT 3.1 support',
        connection: 'Connection',
        security: 'Security',
        will: 'Will Message',
        birth: 'Birth Message',
        clientid: 'Leave blank for auto generated',
        'clientid-nonclean': 'Must be set for non-clean sessions',
        'will-topic': 'Leave blank to disable will message',
        'birth-topic': 'Leave blank to disable birth message',
        connected: 'Connected to broker: __broker__',
        disconnected: 'Disconnected from broker: __broker__',
        'connect-failed': 'Connection failed to broker: __broker__',
        retain: 'Retain',
        true: 'true',
        false: 'false',
        tip: 'Tip: Leave topic, qos or retain blank if you want to set them via msg properties.',
        'not-defined': 'topic not defined',
        'missing-config': 'missing broker configuration',
        'invalid-topic': 'Invalid topic specified',
        'nonclean-missingclientid': 'No client ID set, using clean session',
        method: 'Method',
        url: 'URL',
        doc: 'Docs',
        return: 'Return',
        setby: '- set by msg.method -',
        basicauth: 'Use basic authentication',
        'use-tls': 'Enable secure (SSL/TLS) connection',
        'tls-config': 'TLS Configuration',
        utf8: 'a UTF-8 string',
        binary: 'a binary buffer',
        json: 'a parsed JSON object',
        in: 'The url will be relative to ',
        res: 'The messages sent to this node <b>must</b> originate from an <i>http input</i> node',
        req: 'Tip: If the JSON parse fails the fetched string is returned as-is.',
        httpreq: 'http request',
        'not-created': 'Cannot create http-in node when httpNodeRoot set to false',
        'missing-path': 'missing path',
        'no-response': 'No response object',
        'json-error': 'JSON parse error',
        'no-url': 'No url specified',
        'deprecated-call': 'Deprecated call to __method__',
        requesting: 'requesting',
        type: 'Type',
        path: 'Path',
        url: 'URL',
        listenon: 'Listen on',
        connectto: 'Connect to',
        payload: 'Send/Receive payload',
        message: 'Send/Receive entire message',
        path1: 'By default, <code>payload</code> will contain the data to be sent over, or received from a websocket. The listener can be configured to send or receive the entire message object as a JSON formatted string.',
        path2: 'This path will be relative to ',
        url1: 'URL should use ws:&#47;&#47; or wss:&#47;&#47; scheme and point to an existing websocket listener.',
        url2: 'By default, <code>payload</code> will contain the data to be sent over, or received from a websocket. The client can be configured to send or receive the entire message object as a JSON formatted string.',
        'connect-error': 'An error occured on the ws connection: ',
        'send-error': 'An error occurred while sending: ',
        'missing-conf': 'Missing server configuration',
        files: 'File(s)',
        files: 'Comma-separated list of files and/or directories',
        tip: 'On Windows you must use double back-slashes \\ in any directory names.',
        type: 'Type',
        output: 'Output',
        port: 'port',
        host: 'at host',
        payload: 'payload(s)',
        delimited: 'delimited by',
        'close-connection': 'Close connection after each message is sent?',
        'decode-base64': 'Decode Base64 message?',
        server: 'Server',
        return: 'Return',
        listen: 'Listen on',
        connect: 'Connect to',
        reply: 'Reply to TCP',
        stream: 'stream of',
        single: 'single',
        buffer: 'Buffer',
        string: 'String',
        base64: 'Base64 String',
        timeout: 'after a fixed timeout of',
        character: 'when character received is',
        number: 'a fixed number of chars',
        never: 'never - keep connection open',
        connecting: 'connecting to __host__:__port__',
        connected: 'connected to __host__:__port__',
        'listening-port': 'listening on port __port__',
        'stopped-listening': 'stopped listening on port',
        'connection-from': 'connection from __host__:__port__',
        'connection-closed': 'connection closed from __host__:__port__',
        connections: '__count__ connection',
        connections_plural: '__count__ connections',
        'connection-lost': 'connection lost to __host__:__port__',
        timeout: 'timeout closed socket port __port__',
        'cannot-listen': 'unable to listen on port __port__, error: __error__',
        error: 'error: __error__',
        'socket-error': 'socket error from __host__:__port__',
        'no-host': 'Host and/or port not set',
        'connect-timeout': 'connect timeout',
        'connect-fail': 'connect failed',
        listen: 'Listen for',
        onport: 'on Port',
        using: 'using',
        output: 'Output',
        group: 'Group',
        interface: 'Local IP',
        interfaceprompt: '(optional) local ip address to bind to',
        send: 'Send a',
        toport: 'to port',
        address: 'Address',
        'decode-base64': 'Decode Base64 encoded payload?',
        interface: '(optional) ip address of eth0',
        address: 'destination ip',
        udpmsgs: 'udp messages',
        mcmsgs: 'multicast messages',
        udpmsg: 'udp message',
        bcmsg: 'broadcast message',
        mcmsg: 'multicast message',
        buffer: 'a Buffer',
        string: 'a String',
        base64: 'a Base64 encoded string',
        random: 'bind to random local port',
        local: 'bind to local port',
        target: 'bind to target port',
        in: 'Tip: Make sure your firewall will allow the data in.',
        out: 'Tip: leave address and port blank if you want to set using <code>msg.ip</code> and <code>msg.port</code>.',
        port: 'Ports already in use: ',
        'listener-at': 'udp listener at __host__:__port__',
        'mc-group': 'udp multicast group __group__',
        'listener-stopped': 'udp listener stopped',
        'output-stopped': 'udp output stopped',
        'mc-ready': 'udp multicast ready: __outport__ -> __host__:__port__',
        'bc-ready': 'udp broadcast ready: __outport__ -> __host__:__port__',
        ready: 'udp ready: __outport__ -> __host__:__port__',
        'ready-nolocal': 'udp ready: __host__:__port__',
        'access-error': 'UDP access error, you may need root access for ports below 1024',
        error: 'error: __error__',
        'bad-mcaddress': 'Bad Multicast Address',
        interface: 'Must be ip address of the required interface',
        'ip-notset': 'udp: ip address not set',
        'port-notset': 'udp: port not set',
        'port-invalid': 'udp: port number not valid',
        alreadyused: 'udp: port already in use',
        property: 'Property',
        rule: 'rule',
        and: 'and',
        checkall: 'checking all rules',
        stopfirst: 'stopping after first match',
        ignorecase: 'ignore case',
        btwn: 'is between',
        cont: 'contains',
        regex: 'matches regex',
        true: 'is true',
        false: 'is false',
        null: 'is null',
        nnull: 'is not null',
        else: 'otherwise',
        rules: 'Rules',
        rule: 'rule',
        set: 'set __property__',
        change: 'change __property__',
        delete: 'delete __property__',
        move: 'move __property__',
        changeCount: 'change: __count__ rules',
        regex: 'Use regular expressions',
        set: 'Set',
        change: 'Change',
        delete: 'Delete',
        move: 'Move',
        to: 'to',
        search: 'Search for',
        replace: 'Replace with',
        'invalid-from': 'Invalid "from" property: __error__',
        'invalid-json': 'Invalid "to" JSON property',
        action: 'Action',
        inputrange: 'Map the input range',
        resultrange: 'to the result range',
        from: 'from',
        to: 'to',
        roundresult: 'Round result to the nearest integer?',
        min: 'e.g. 0',
        maxin: 'e.g. 99',
        maxout: 'e.g. 255',
        payload: 'Scale msg.payload',
        limit: 'Scale and limit to the target range',
        wrap: 'Scale and wrap within the target range',
        tip: 'Tip: This node ONLY works with numbers.',
        notnumber: 'Not a number',
        columns: 'Columns',
        separator: 'Separator',
        c2o: 'CSV-to-Object options',
        o2c: 'Object-to-CSV options',
        input: 'Input',
        firstrow: 'first row contains column names',
        output: 'Output',
        includerow: 'include column name row',
        newline: 'Newline',
        columns: 'comma-separated column names',
        comma: 'comma',
        tab: 'tab',
        space: 'space',
        semicolon: 'semicolon',
        colon: 'colon',
        hashtag: 'hashtag',
        other: 'other...',
        row: 'a message per row',
        array: 'a single message [array]',
        linux: 'Linux (\n)',
        mac: 'Mac (\r)',
        windows: 'Windows (\r\n)',
        csv_js: 'This node only handles csv strings or js objects.',
        obj_csv: 'No columns template specified for object -> csv.',
        select: 'Select',
        output: 'Output',
        html: 'the html content of the elements',
        text: 'only the text content of the elements',
        attr: 'an object of any attributes of the elements',
        single: 'as a single message containing an array',
        multi: 'as multiple messages, one for each element',
        tip: 'Tip: The <b>Select</b> value is a <a href="https://github.com/fb55/CSSselect#user-content-supported-selectors" target="_new"><i><u>CSS Selector</u></i></a>, similar to a jQuery selector.',
        'dropped-object': 'Ignored non-object payload',
        dropped: 'Ignored unsupported payload type',
        'dropped-error': 'Failed to convert payload',
        represent: 'Represent XML tag attributes as a property named',
        prefix: 'Prefix to access character content',
        advanced: 'Advanced options',
        tip: 'There is no simple way to convert XML attributes to JSON so the approach taken here is to add a property, named $ by default, to the JSON structure.',
        xml_js: 'This node only handles xml strings or js objects.',
        gpiopin: 'GPIO',
        selectpin: 'select pin',
        resistor: 'Resistor?',
        readinitial: 'Read initial state of pin on deploy/restart?',
        type: 'Type',
        initpin: 'Initialise pin state?',
        debounce: 'Debounce',
        button: 'Button',
        pimouse: 'Pi Mouse',
        pikeyboard: 'Pi Keyboard',
        left: 'Left',
        right: 'Right',
        middle: 'Middle',
        none: 'none',
        pullup: 'pullup',
        pulldown: 'pulldown',
        digout: 'Digital output',
        pwmout: 'PWM output',
        initpin0: 'initial level of pin - low (0)',
        initpin1: 'initial level of pin - high (1)',
        left: 'left',
        right: 'right',
        middle: 'middle',
        any: 'any',
        pinname: 'Pin',
        alreadyuse: 'already in use',
        alreadyset: 'already set as',
        pin: '<b>Pins in Use</b>: ',
        in: 'Tip: Only Digital Input is supported - input must be 0 or 1.',
        dig: '<b>Tip</b>: For digital output - input must be 0 or 1.',
        pwm: '<b>Tip</b>: For PWM output - input must be between 0 to 100.',
        digout: 'digital output',
        input: 'input',
        pullup: 'input with pull up',
        pulldown: 'input with pull down',
        pwmout: 'PWM output',
        stopped: 'stopped',
        closed: 'closed',
        'not-running': 'not running',
        ignorenode: 'Ignoring Raspberry Pi specific node',
        version: 'Version command failed',
        sawpitype: 'Saw Pi Type',
        libnotfound: 'Cannot find Pi RPi.GPIO python library',
        alreadyset: 'GPIO pin __pin__ already set as type: __type__',
        invalidpin: 'Invalid GPIO pin',
        invalidinput: 'Invalid input',
        needtobeexecutable: '__command__ needs to be executable',
        mustbeexecutable: 'nrgpio must to be executable',
        commandnotfound: 'nrgpio command not found',
        commandnotexecutable: 'nrgpio command not executable',
        error: 'error: __error__',
        pythoncommandnotfound: 'nrpgio python command not running',
        filename: 'Filename',
        type: 'File type',
        splitlines: 'Split lines on \n?',
        text: 'Text - returns String',
        binary: 'Binary - returns Buffer',
        windowsnotsupport: 'Not currently supported on Windows.',
        filename: 'Filename',
        action: 'Action',
        addnewline: 'Add newline (\n) to each payload?',
        createdir: 'Create directory if it doesn"t exist?',
        outputas: 'Output as',
        filelabel: 'file',
        deletelabel: 'delete __file__',
        append: 'append to file',
        overwrite: 'overwrite file',
        delete: 'delete file',
        utf8: 'a utf8 string',
        buffer: 'a Buffer',
        wrotefile: 'wrote to file: __file__',
        deletedfile: 'deleted file: __file__',
        appendedfile: 'appended to file: __file__',
        nofilename: 'No filename specified',
        invaliddelete: 'Warning: Invalid delete. Please use specific delete option in config dialog.',
        deletefail: 'failed to delete file: __error__',
        writefail: 'failed to write to file: __error__',
        appendfail: 'failed to append to file: __error__',
        createfail: 'failed to create file: __error__'
    });
};

exports.email = function(req, res){
    res.json({
        to: 'To',
        server: 'Server',
        port: 'Port',
        userid: 'Userid',
        password: 'Password',
        repeat: 'Refresh',
        seconds: 'seconds',
        folder: 'Folder',
        protocol: 'Protocol',
        useSSL: 'Use SSL?',
        disposition: 'Disposition',
        'default-message': 'Your file from Node-RED is attached: __filename__ __description__',
        cred: '<b>Note:</b> Copied credentials from global emailkeys.js file.',
        recent: 'Tip: Only retrieves the single most recent email.',
        messagesent: 'Message sent: __response__',
        fetching: 'fetching',
        foldererror: 'fetch folder error',
        messageerror: 'fetch message error',
        message: 'message #__number__',
        newemail: 'received new email: __topic__',
        duplicate: 'duplicate not sent: __topic__',
        inboxzero: 'you have achieved Inbox Zero',
        sending: 'sending',
        sendfail: 'send failed',
        connecterror: 'connect error',
        nouserid: 'No e-mail userid set',
        nopassword: 'No e-mail password set',
        nocredentials: 'No Email credentials found. See info panel.',
        nopayload: 'No payload to send',
        fetchfail: 'Failed to fetch folder: __folder__',
        messageerror: 'Fetch message error: __error__'
    });
};


exports.feedparse = function(req, res){
    res.json({
        feedurl: 'Feed url',
        refresh: 'Refresh',
        minutes: 'minutes',
        badstatuscode: 'error - Bad status code',
        invalidurl: 'Invalid url'
    });
};

exports.rbe = function(req, res){
    res.json({
        func: 'Mode',
        start: 'Start value',
        name: 'Name',
        bandgap: 'e.g. 10 or 5%',
        start: 'leave blank to use first data received',
        rbe: 'block unless value changes',
        deadband: 'block unless value changes by more than',
        narrowband: 'block if value changes by more than',
        in: 'compared to last input value',
        out: 'compared to last valid output value',
        nonumber: 'no number found in payload'
    });
};


exports.serialport = function(req, res){
    res.json({
        serialport: 'Serial Port',
        settings: 'Settings',
        baudrate: 'Baud Rate',
        databits: 'Data Bits',
        parity: 'Parity',
        stopbits: 'Stop Bits',
        input: 'Input',
        split: 'Split input',
        deliver: 'and deliver',
        output: 'Output',
        serial: 'serial',
        none: 'none',
        serialport: 'for example: /dev/ttyUSB0/',
        none: 'None',
        even: 'Even',
        mark: 'Mark',
        odd: 'Odd',
        space: 'Space',
        character: 'on the character',
        timeout: 'after a timeout of',
        lengths: 'into fixed lengths of',
        ascii: 'ascii strings',
        binary: 'binary buffers',
        addsplit: 'add split character to output messages',
        split: 'Tip: the "Split on" character is used to split the input into separate messages. It can also be added to every message sent out to the serial port.',
        timeout: 'Tip: In timeout mode timeout starts from arrival of first character.',
        onopen: 'serial port __port__ opened at __baud__ baud __config__',
        'missing-conf': 'missing serial config',
        'serial-port': 'serial port',
        error: 'serial port __port__ error: __error__',
        'unexpected-close': 'serial port __port__ closed unexpectedly',
        disconnected: 'serial port __port__ disconnected',
        closed: 'serial port __port__ closed'
    });
};

exports.twitter = function(req, res){
    res.json({
        'twitter-id': 'Twitter ID',
        search: 'Search',
        for: 'for',
        user: 'User',
        dmslabel: 'DMs',
        tweetslabel: 'tweets',
        clickhere: 'Click here to authenticate with Twitter.',
        for: 'comma-separated words, @ids, #tags',
        user: 'comma-separated @twitter handles',
        public: 'all public tweets',
        follow: 'the tweets of who you follow',
        user: 'the tweets of specific users',
        direct: 'your direct messages',
        tip: 'Tip: Use commas without spaces between multiple search terms. Comma = OR, Space = AND.<br/>The Twitter API WILL NOT deliver 100% of all tweets.<br/>Tweets of who you follow will include their retweets and favourites.',
        'using-geo': 'Using geo location: __location__',
        tweeting: 'tweeting',
        failed: 'failed',
        ratelimit: 'tweet rate limit hit',
        streamerror: 'stream error: __error__ (__rc__)',
        unexpectedend: 'stream ended unexpectedly',
        invalidtag: 'invalid tag property',
        missingcredentials: 'missing twitter credentials',
        truncated: 'truncated tweet greater than 140 characters',
        sendfail: 'send tweet failed: __error__',
        nopayload: 'no payload to tweet',
        oauthbroke: 'something in twitter oauth broke.',
        oautherror: '<html><head></head><body><p>Something went wrong with the authentication process. The following error was returned:</p><p><b>__statusCode__</b>: __errorData__</p><p>One known cause of this type of failure is if the clock is wrong on system running Node-RED</p></body></html>',
        authorized: '<html><head></head><body><p>Authorised - you can close this window and return to Node-RED</p></body></html>'
    });
};